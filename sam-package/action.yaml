name: SAM Package
description: Build and package using SAM

inputs:
  aws-region:
    description: AWS Region
    required: true

  aws-role-arn:
    description: AWS Role to assume when packaing
    required: true

  bucket:
    description: S3 bucket name
    required: true

  ref:
    description: Git Ref to package
    required: false
    default: ''

  requirements:
    description: Python Requirements
    required: false
    default: requirements.txt

  sam-build-args:
    description: Additional args to pass to SAM when building
    required: false

  sam-version:
    default: 1.67.0
    description: Version of AWS SAM to use
    required: false

  ssh-private-key:
    description: SSH key to use when installing dependencies
    required: false

  stack-name:
    description: Name of the stack folder
    required: true

  stack-prefix:
    description: Stack name prefix
    required: false
    default: ''

  use-container:
    description: Build inside a docker container
    required: false
    default: 'false'

  use-integrated-sam:
    description: Install aws sam togehter with the other python dependencies
    required: false
    default: 'false'


outputs:
  bucket:
    description: Target bucket name
    value: ${{ inputs.bucket }}

  stack-name:
    description: Exported stack name
    value: ${{ inputs.stack-name }}

  template:
    description: Template file name
    value: ${{ inputs.stack-name }}-template

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.ref }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        cache: pip
        python-version: 3.9

    - name: Setup SAM
      if: ${{ !fromJSON(inputs.use-integrated-sam) }}
      uses: aws-actions/setup-sam@v2
      with:
        version: ${{ inputs.sam-version }}

    - name: SAM fix https://github.com/aws/aws-sam-cli/issues/4527
      if: ${{ !fromJSON(inputs.use-integrated-sam) }}
      run: $(dirname $(readlink $(which sam)))/pip install --force-reinstall "cryptography==38.0.4"
      shell: bash

    - name: Install SSH Key
      if: ${{ inputs.ssh-private-key }}
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ inputs.ssh-private-key }}

    - name: Install dependencies
      if: ${{ !fromJSON(inputs.use-integrated-sam) && inputs.requirements }}
      working-directory: ${{ inputs.stack-name }}
      run: pip install -r ${{ inputs.requirements }}
      shell: bash

    - name: Install dependencies with SAM
      if: ${{ fromJSON(inputs.use-integrated-sam) }}
      working-directory: ${{ inputs.stack-name }}
      run: >-
        pip install -r ${{ inputs.requirements }} setuptools wheel aws-sam-cli==${{ inputs.sam-version }}
      shell: bash

    - name: Cache build
      uses: actions/cache@v3
      with:
        path: ${{ inputs.stack-name }}/.aws-sam
        key: ${{ runner.os }}-${{ inputs.stack-name }}-sam-package

    - name: Build using Container
      id: build-using-container
      if: ${{ fromJSON(inputs.use-container) }}
      working-directory: ${{ inputs.stack-name }}
      run: >-
        sam build --cached --parallel --use-container ${{ inputs.sam-build-args }}
      shell: bash

    - name: Build
      if: ${{ steps.build-using-container.outcome == 'skipped' }}
      working-directory: ${{ inputs.stack-name }}
      run: >-
        sam build --cached --parallel ${{ inputs.sam-build-args }}
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-region: ${{ inputs.aws-region }}
        role-duration-seconds: 900
        role-session-name: deploy-${{ inputs.stack-prefix }}${{ inputs.stack-name }}
        role-to-assume: ${{ inputs.aws-role-arn }}

    - name: Prepare Output Directory
      working-directory: ${{ inputs.stack-name }}
      run: mkdir .packaged
      shell: bash

    - name: Package
      working-directory: ${{ inputs.stack-name }}
      run: |
        sam package \
          --region ${{ inputs.aws-region }} \
          --s3-bucket ${{ inputs.bucket }} \
          --s3-prefix ${{ inputs.stack-prefix }}${{ inputs.stack-name }} \
          --output-template-file .packaged/template.yaml
      shell: bash

    - name: Upload build
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.stack-name }}-template
        path: ${{ inputs.stack-name }}/.packaged/template.yaml
